(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{427:function(e,s,t){"use strict";t.r(s);var a=t(42),n=Object(a.a)({},(function(){var e=this,s=e.$createElement,t=e._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"howto-romulus-upgrade"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#howto-romulus-upgrade"}},[e._v("#")]),e._v(" HOWTO Romulus Upgrade")]),e._v(" "),t("p",[e._v("** These are notes provided by SecretNodes.org and other contributors that we used to test and develop the final upgrade instructions **")]),e._v(" "),t("ul",[t("li",[e._v("DO NOT use these instructions for the actual Romulus Upgrade procedure *")])]),e._v(" "),t("p",[e._v("The "),t("a",{attrs:{href:"https://explorer.cashmaney.com/proposals/13",target:"_blank",rel:"noopener noreferrer"}},[e._v("rebranding proposal"),t("OutboundLink")],1),e._v(" passed on-chain, and this mandates a hard fork.")]),e._v(" "),t("p",[e._v("The network needs to decide on a block number to fork from.\nSince most nodes use "),t("code",[e._v("--pruning syncable")]),e._v(" configuration, the node prunes most of the blocks, so state should be exported from a height that is a multiple of 100 (e.g. 100, 500, 131400, ...).")]),e._v(" "),t("p",[e._v("For better background, before reading this guide you might want to check out Cosmos' guide upgrading from "),t("code",[e._v("cosmoshub-2")]),e._v(" to "),t("code",[e._v("cosmoshub-3")]),e._v(": https://github.com/cosmos/gaia/blob/master/docs/migration/cosmoshub-2.md")]),e._v(" "),t("h3",{attrs:{id:"_1-export-genesis-json-for-the-new-fork"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-export-genesis-json-for-the-new-fork"}},[e._v("#")]),e._v(" 1. Export "),t("code",[e._v("genesis.json")]),e._v(" for the new fork:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl stop enigma-node\nsecretd "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" --for-zero-height --height "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("agreed_upon_block_height"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" exported_state.json\n")])])]),t("h3",{attrs:{id:"_2-inside-exported-state-json-rename-chain-id-from-enigma-1-to-the-new-agreed-upon-chain-id-secret-1"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-inside-exported-state-json-rename-chain-id-from-enigma-1-to-the-new-agreed-upon-chain-id-secret-1"}},[e._v("#")]),e._v(" 2. Inside "),t("code",[e._v("exported_state.json")]),e._v(" Rename "),t("code",[e._v("chain_id")]),e._v(" from "),t("code",[e._v("enigma-1")]),e._v(" to the new agreed upon Chain ID ("),t("code",[e._v("secret-1")]),e._v(")")]),e._v(" "),t("p",[e._v("For example:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("perl -i -pe "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'s/"enigma-1"/"secret-1"/\'')]),e._v(" exported_state.json\n")])])]),t("h3",{attrs:{id:"_3-convert-all-enigma-addresses-to-secret-adresses"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-convert-all-enigma-addresses-to-secret-adresses"}},[e._v("#")]),e._v(" 3. Convert all "),t("code",[e._v("enigma")]),e._v(" addresses to "),t("code",[e._v("secret")]),e._v(" adresses")]),e._v(" "),t("p",[e._v("Using the CLI:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("wget")]),e._v(" https://github.com/enigmampc/bech32.enigma.co/releases/download/cli/bech32-convert\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("chmod")]),e._v(" +x bech32-convert\n\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" exported_state.json "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" ./bech32-convert "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" secret-1-genesis.json\n")])])]),t("p",[e._v("Or you can just paste "),t("code",[e._v("exported_state.json")]),e._v(" into https://bech32.enigma.co and paste the result back into "),t("code",[e._v("secret-1-genesis.json")]),e._v(".")]),e._v(" "),t("h3",{attrs:{id:"_4-use-jq-to-make-the-secret-1-genesis-json-more-readable"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-use-jq-to-make-the-secret-1-genesis-json-more-readable"}},[e._v("#")]),e._v(" 4. Use "),t("code",[e._v("jq")]),e._v(" to make the "),t("code",[e._v("secret-1-genesis.json")]),e._v(" more readable")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("jq "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" secret-1-genesis.json "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" secret-1-genesis-jq.json\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("mv")]),e._v(" secret-1-genesis-jq.json secret-1-genesis.json\n\n")])])]),t("p",[e._v("NOTE: if you don't have "),t("code",[e._v("jq")]),e._v(", you can install it with "),t("code",[e._v("sudo apt-get install jq")])]),e._v(" "),t("h3",{attrs:{id:"_5-add-tokenswap-parameters"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-add-tokenswap-parameters"}},[e._v("#")]),e._v(" 5. Add Tokenswap parameters")]),e._v(" "),t("p",[e._v("Modify the "),t("code",[e._v("secret-1-genesis.json")]),e._v(" and add the following tokenswap parameters under "),t("code",[e._v("gov")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("\t"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"tokenswap"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"params"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"minting_approver_address"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('""')]),e._v(",\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"minting_multiplier"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"1.000000000000000000"')]),e._v(",\n\t\t\t"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"minting_enabled"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("false")]),e._v("\n\t\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(",\n\t\t"),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"swaps"')]),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(":")]),e._v(" null\n\t"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(",\n")])])]),t("h3",{attrs:{id:"_6-compile-the-new-secret-binaries-with-make-deb-or-distribute-them-precompiled"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-compile-the-new-secret-binaries-with-make-deb-or-distribute-them-precompiled"}},[e._v("#")]),e._v(" 6. Compile the new "),t("code",[e._v("secret")]),e._v(" binaries with "),t("code",[e._v("make deb")]),e._v(" (or distribute them precompiled).")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("secretnetwork_0.2.0_amd64.deb\n")])])]),t("h3",{attrs:{id:"_7-setup-new-binaries"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-setup-new-binaries"}},[e._v("#")]),e._v(" 7. Setup new binaries:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" dpkg -i secretnetwork_0.2.0_amd64.deb "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# install secretd & secretcli and setup secret-node.service")]),e._v("\n\nsecretcli config chain-id secret-1\nsecretcli config output json\nsecretcli config indent "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\nsecretcli config trust-node "),t("span",{pre:!0,attrs:{class:"token boolean"}},[e._v("true")]),e._v("\n")])])]),t("h3",{attrs:{id:"_8-setup-the-new-node-validaor"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-setup-the-new-node-validaor"}},[e._v("#")]),e._v(" 8. Setup the new node/validaor:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# args for secretd init doesn't matter because we're going to import the old config files")]),e._v("\nsecretd init "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("moniker"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" --chain-id secret-1\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# import old config files to the new node")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" ~/.secretd/config/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("app.toml,config.toml,addrbook.json"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" ~/.secretd/config\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# import node's & validator's private keys to the new node")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" ~/.secretd/config/"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("priv_validator_key.json,node_key.json"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" ~/.secretd/config\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# set new_genesis.json from step 3 as the genesis.json of the new chain")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("cp")]),e._v(" new_genesis.json ~/.secretd/config/genesis.json\n\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# at this point you should also validate sha256 checksums of ~/.secretd/config/* against ~/.secretd/config/*")]),e._v("\n")])])]),t("h3",{attrs:{id:"_9-start-the-new-secret-node"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-start-the-new-secret-node"}},[e._v("#")]),e._v(" 9. Start the new Secret Node! 🎉")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("enable")]),e._v(" secret-node "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# enable on startup")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sudo")]),e._v(" systemctl start secret-node\n")])])]),t("p",[e._v("Once more than 2/3 of voting power comes online you'll start seeing blocks streaming on:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("journalctl -u secret-node -f\n")])])]),t("p",[e._v("If something goes wrong the network can relaunch the "),t("code",[e._v("enigma-node")]),e._v(", therefore it's not advisable to delete "),t("code",[e._v("~/.secretd")]),e._v(" & "),t("code",[e._v("~/.secretcli")]),e._v(" until the new chain is live and stable.")]),e._v(" "),t("h3",{attrs:{id:"_10-import-wallet-keys-from-the-old-chain-to-the-new-chain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-import-wallet-keys-from-the-old-chain-to-the-new-chain"}},[e._v("#")]),e._v(" 10. Import wallet keys from the old chain to the new chain:")]),e._v(" "),t("p",[e._v("(Ledger Nano S/X users shouldn't do anything, just use the new CLI with "),t("code",[e._v("--ledger --account <number>")]),e._v(" as usual)")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("secretcli keys "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("key_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# this^ outputs stuff to stderr and also exports the key to stderr,")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# so copy only the private key output to a file named `key.export`")]),e._v("\n\nsecretcli "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("import")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("<")]),e._v("key_name"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v(">")]),e._v(" key.export\n")])])]),t("h3",{attrs:{id:"_11-when-the-new-chain-is-live-and-everything-works-well-you-can-delete-the-files-of-the-old-chain"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-when-the-new-chain-is-live-and-everything-works-well-you-can-delete-the-files-of-the-old-chain"}},[e._v("#")]),e._v(" 11. When the new chain is live and everything works well, you can delete the files of the old chain:")]),e._v(" "),t("ul",[t("li",[t("code",[e._v("rm -rf ~/.secretd")])]),e._v(" "),t("li",[t("code",[e._v("rm -rf ~/.secretcli")])]),e._v(" "),t("li",[t("code",[e._v("sudo dpkg -r enigma-blockchain")])])])])}),[],!1,null,null,null);s.default=n.exports}}]);