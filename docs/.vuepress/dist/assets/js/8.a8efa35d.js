(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{302:function(e,t,a){e.exports=a.p+"assets/img/secretcli_keys_list.3418ae8c.png"},383:function(e,t,a){"use strict";a.r(t);var r=a(42),s=Object(r.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"developing-secret-contracts"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#developing-secret-contracts"}},[e._v("#")]),e._v(" Developing Secret Contracts")]),e._v(" "),r("p",[e._v("Secret Contacts are based on CosmWasm v0.10.")]),e._v(" "),r("p",[e._v("Check out the "),r("a",{attrs:{href:"https://docs.cosmwasm.com",target:"_blank",rel:"noopener noreferrer"}},[e._v("CosmWasm docs"),r("OutboundLink")],1),e._v(" as well. They are probably more extensive.")]),e._v(" "),r("p",[e._v("Don't forget to go over the "),r("a",{attrs:{href:"#differences-from-cosmwasm"}},[e._v("differences between SecretWasm and CosmWasm")]),e._v(".")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#developing-secret-contracts"}},[e._v("Developing Secret Contracts")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#ides"}},[e._v("IDEs")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#personal-secret-network-for-secret-contract-development"}},[e._v("Personal Secret Network for Secret Contract development")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#init"}},[e._v("Init")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#handle"}},[e._v("Handle")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#query"}},[e._v("Query")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#inputs"}},[e._v("Inputs")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#apis"}},[e._v("APIs")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#state"}},[e._v("State")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#some-librariescrates-considerations"}},[e._v("Some libraries/crates considerations")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#randomness"}},[e._v("Randomness")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#roll-your-own"}},[e._v("Roll your own")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#poker-deck-shuffling-example"}},[e._v("Poker deck shuffling example")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#use-an-external-oracle"}},[e._v("Use an external oracle")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#outputs"}},[e._v("Outputs")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#external-query"}},[e._v("External query")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#compiling"}},[e._v("Compiling")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#with-docker"}},[e._v("With docker")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#without-docker"}},[e._v("Without docker")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#storing-and-deploying"}},[e._v("Storing and deploying")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#verifying-your-contract-code-on-explorers"}},[e._v("Verifying your contract code on explorers")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#testing"}},[e._v("Testing")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#debugging"}},[e._v("Debugging")])]),e._v(" "),r("li",[r("a",{attrs:{href:"#building-secret-apps-with-secretjs"}},[e._v("Building secret apps with SecretJS")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#wallet-integration"}},[e._v("Wallet integration")])])])]),e._v(" "),r("li",[r("a",{attrs:{href:"#differences-from-cosmwasm"}},[e._v("Differences from CosmWasm")])])])])]),e._v(" "),r("h2",{attrs:{id:"ides"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#ides"}},[e._v("#")]),e._v(" IDEs")]),e._v(" "),r("p",[e._v("Secret Contracts are developed with the "),r("a",{attrs:{href:"https://www.rust-lang.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Rust"),r("OutboundLink")],1),e._v(" programming language and compiled to "),r("a",{attrs:{href:"https://webassembly.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("WASM"),r("OutboundLink")],1),e._v(" binaries.")]),e._v(" "),r("p",[e._v("These IDEs are known to work very well for developing Secret Contracts:")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.jetbrains.com/clion/",target:"_blank",rel:"noopener noreferrer"}},[e._v("CLion"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"}},[e._v("VSCode"),r("OutboundLink")],1),e._v(" with the "),r("a",{attrs:{href:"https://rust-analyzer.github.io/",target:"_blank",rel:"noopener noreferrer"}},[e._v("rust-analyzer"),r("OutboundLink")],1),e._v(" extension")])]),e._v(" "),r("h2",{attrs:{id:"personal-secret-network-for-secret-contract-development"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#personal-secret-network-for-secret-contract-development"}},[e._v("#")]),e._v(" Personal Secret Network for Secret Contract development")]),e._v(" "),r("p",[e._v("The developer blockchain is configured to run inside a docker container. Install "),r("a",{attrs:{href:"https://docs.docker.com/get-docker/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker"),r("OutboundLink")],1),e._v(" for your environment (Mac, Windows, Linux).")]),e._v(" "),r("p",[e._v("Open a terminal window and change to your project directory.\nThen start SecretNetwork, labelled "),r("em",[e._v("secretdev")]),e._v(":")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ docker run -it --rm \\\n -p 26657:26657 -p 26656:26656 -p 1317:1317 \\\n --name secretdev enigmampc/secret-network-bootstrap-sw:latest\n")])])]),r("p",[r("strong",[e._v("NOTE")]),e._v(": The "),r("em",[e._v("secretdev")]),e._v(" docker container can be stopped with Ctrl+C")]),e._v(" "),r("p",[e._v("At this point you're running a local SecretNetwork full-node. Let's connect to the container so we can view and manage the secret keys:")]),e._v(" "),r("p",[r("strong",[e._v("NOTE")]),e._v(": In a new terminal")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("docker exec -it secretdev /bin/bash\n")])])]),r("p",[e._v("The local blockchain has a couple of keys setup for you (similar to accounts if you're familiar with Truffle Ganache). The keys are stored in the "),r("code",[e._v("test")]),e._v(" keyring backend, which makes it easier for local development and testing.")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("secretcli keys list --keyring-backend test\n")])])]),r("p",[r("img",{attrs:{src:a(302),alt:""}})]),e._v(" "),r("p",[r("code",[e._v("exit")]),e._v(" when you are done.")]),e._v(" "),r("h2",{attrs:{id:"init"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#init"}},[e._v("#")]),e._v(" Init")]),e._v(" "),r("p",[r("code",[e._v("init")]),e._v(" is the constructor of your contract. This function is called only once in the lifetime of the contract.")]),e._v(" "),r("p",[e._v("Example Invocation from "),r("code",[e._v("secretcli")]),e._v(":")]),e._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[e._v("secretcli tx compute instantiate "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CODE_ID")]),e._v('"')]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$INPUT_MSG")]),e._v('"')]),e._v(" --label "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$UNIQUE_LABEL")]),e._v('"')]),e._v(" --from "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$MY_KEY")]),e._v('"')]),e._v("\n")])])]),r("p",[e._v("Example Invocation from "),r("code",[e._v("SecretJS")]),e._v(":")]),e._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// TODO")]),e._v("\n")])])]),r("h2",{attrs:{id:"handle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#handle"}},[e._v("#")]),e._v(" Handle")]),e._v(" "),r("p",[r("code",[e._v("handle")]),e._v(" is the implementation of execute transactions.")]),e._v(" "),r("p",[e._v("Example Invocation from "),r("code",[e._v("secretcli")]),e._v(":")]),e._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[e._v("secretcli tx compute execute "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CONTRACT_ADDRESS")]),e._v('"')]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$INPUT_ARGS")]),e._v('"')]),e._v(" --from "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$MY_KEY")]),e._v('"')]),e._v(" "),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Option A")]),e._v("\nsecretcli tx compute execute --label "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$LABEL")]),e._v('"')]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$INPUT_ARGS")]),e._v('"')]),e._v(" --from "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$MY_KEY")]),e._v('"')]),e._v("    "),r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Option B")]),e._v("\n")])])]),r("p",[e._v("Example Invocation from "),r("code",[e._v("SecretJS")]),e._v(":")]),e._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// TODO")]),e._v("\n")])])]),r("h2",{attrs:{id:"query"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#query"}},[e._v("#")]),e._v(" Query")]),e._v(" "),r("p",[r("code",[e._v("query")]),e._v(" is the implementation of read-only queries. Queries run over the current blockchain state but don't incur fees and don't have access to "),r("code",[e._v("msg.sender")]),e._v(". They are still metered by a gas limit that is set on the executing node.")]),e._v(" "),r("p",[e._v("Example Invocation from "),r("code",[e._v("secretcli")]),e._v(":")]),e._v(" "),r("div",{staticClass:"language-bash extra-class"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[e._v("secretcli q compute query "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$CONTRACT_ADDRESS")]),e._v('"')]),e._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[e._v('"'),r("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$INPUT_ARGS")]),e._v('"')]),e._v("\n")])])]),r("p",[e._v("Example Invocation from "),r("code",[e._v("SecretJS")]),e._v(":")]),e._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// TODO")]),e._v("\n")])])]),r("h2",{attrs:{id:"inputs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#inputs"}},[e._v("#")]),e._v(" Inputs")]),e._v(" "),r("h2",{attrs:{id:"apis"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#apis"}},[e._v("#")]),e._v(" APIs")]),e._v(" "),r("h2",{attrs:{id:"state"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#state"}},[e._v("#")]),e._v(" State")]),e._v(" "),r("h2",{attrs:{id:"debug-printing"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#debug-printing"}},[e._v("#")]),e._v(" Debug printing")]),e._v(" "),r("p",[e._v("Under normal circumstances, contracts can not be debugged while running\non-chain, inside the enclave.\nIn most cases where you need to track down the source of an issue, this is fine:")]),e._v(" "),r("ul",[r("li",[e._v("If some function is behaving oddly, a unit test can be written to isolate and\nfix the issue.")]),e._v(" "),r("li",[e._v("If you have a "),r("code",[e._v("Result::Err")]),e._v(" being thrown somewhere, it usually has a clear and\ndistinct error message which can be tracked to its source.")]),e._v(" "),r("li",[e._v("If your contract returns a result but it's wrong for some reason, and you\ncan't figure out why, you can add logs to the response that show the values\nof some variables.")])]),e._v(" "),r("p",[e._v("But, there is one error case that just halts the contract, reverts the state,\nand returns no feedback for the cause of the failure: "),r("strong",[e._v("PANICS")])]),e._v(" "),r("p",[e._v("Starting from version 1.1.0 of SecretNetwork, we provide another useful tool to\nthe contract developing toolkit: debug prints.")]),e._v(" "),r("p",[r("code",[e._v("cosmwasm_std::debug_print")]),e._v(" is both a function that takes a "),r("code",[e._v("String")]),e._v(" or "),r("code",[e._v("&str")]),e._v(",\nas well as a macro that works just like "),r("code",[e._v("println")]),e._v(" in normal rust. By default,\nusing it does nothing at all, and it's compiled away. To activate the debug\nprinting feature, contracts must enable the "),r("code",[e._v("debug-print")]),e._v(" feature in\n"),r("code",[e._v("cosmwasm_std")]),e._v(". This can be done by adding this line under the "),r("code",[e._v("[features]")]),e._v("\nsection in "),r("code",[e._v("Cargo.toml")]),e._v(":")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v('debug-print = ["cosmwasm_std/debug-print"]\n')])])]),r("p",[e._v("and then compiling the contract with "),r("code",[e._v("--features debug-print")]),e._v(".")]),e._v(" "),r("p",[e._v("Once compiled with this flag, and executed on the local dev image (using\n"),r("code",[e._v("enigmampc/secret-network-sw-dev")]),e._v("), the messages passed to "),r("code",[e._v("debug_print")]),e._v(" will\nbe shown as logs in the dev image's logging output.")]),e._v(" "),r("p",[e._v("Now you can print information from within the contract to the console running\nthe dev image, and these logs will be visible there even if the contract\ncrashes. This is generally more convenient than the three techniques described\nabove. You can also safely leave the calls to "),r("code",[e._v("debug_print")]),e._v(" in your source code,\nand they will only have an effect when used during development!")]),e._v(" "),r("p",[e._v("Naturally, we don't want node runners to see private debug information in\nproduction, so the interfaces used by this API are only available in the\nlocal dev image. Trying to store a module that was compiled with this flag to\ntestnet or mainnet will fail on validation.")]),e._v(" "),r("h2",{attrs:{id:"some-libraries-crates-considerations"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#some-libraries-crates-considerations"}},[e._v("#")]),e._v(" Some libraries/crates considerations")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("bincode2")]),e._v(" instead of "),r("code",[e._v("bincode")]),e._v(" for serializing data.")]),e._v(" "),r("li",[r("code",[e._v("serde_json_wasm")]),e._v(" instead of "),r("code",[e._v("serde_json")]),e._v(" for serializing data.")]),e._v(" "),r("li",[r("code",[e._v("bech32")]),e._v(" instead of "),r("code",[e._v("deps.api.canonical_address")]),e._v(" and "),r("code",[e._v("deps.api.human_address")]),e._v(", as they only support "),r("code",[e._v("secret")]),e._v(" prefix (E.g. not "),r("code",[e._v("secretvaloper")]),e._v(" for staking use-cases).")])]),e._v(" "),r("h2",{attrs:{id:"randomness"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#randomness"}},[e._v("#")]),e._v(" Randomness")]),e._v(" "),r("h3",{attrs:{id:"roll-your-own"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#roll-your-own"}},[e._v("#")]),e._v(" Roll your own")]),e._v(" "),r("h4",{attrs:{id:"poker-deck-shuffling-example"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#poker-deck-shuffling-example"}},[e._v("#")]),e._v(" Poker deck shuffling example")]),e._v(" "),r("ol",[r("li",[e._v("When joining a room, "),r("a",{attrs:{href:"https://github.com/enigmampc/SecretHoldEm/blob/4f67c469bb4a0f53522c7ad069e54ae5c1effb6b/contract/src/contract.rs#L172",target:"_blank",rel:"noopener noreferrer"}},[e._v("each player sends a secret number"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("li",[e._v("Once the room is full, all secrets are combined with sha256 to "),r("a",{attrs:{href:"https://github.com/enigmampc/SecretHoldEm/blob/4f67c469bb4a0f53522c7ad069e54ae5c1effb6b/contract/src/contract.rs#L349-L355",target:"_blank",rel:"noopener noreferrer"}},[e._v("create a random seed"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("li",[e._v("With that seed, the "),r("a",{attrs:{href:"https://github.com/enigmampc/SecretHoldEm/blob/4f67c469bb4a0f53522c7ad069e54ae5c1effb6b/contract/src/contract.rs#L356-L357",target:"_blank",rel:"noopener noreferrer"}},[e._v("deck is shuffled"),r("OutboundLink")],1),e._v(".")]),e._v(" "),r("li",[e._v("Each round a "),r("a",{attrs:{href:"https://github.com/enigmampc/SecretHoldEm/blob/4f67c469bb4a0f53522c7ad069e54ae5c1effb6b/contract/src/contract.rs#L602-L614",target:"_blank",rel:"noopener noreferrer"}},[e._v("game counter is incremented"),r("OutboundLink")],1),e._v(", and along with the players' secrets is used to create a new seed for re-shuffling the deck.")]),e._v(" "),r("li",[e._v("On the frondend side, "),r("a",{attrs:{href:"https://github.com/enigmampc/SecretHoldEm/blob/4f67c469bb4a0f53522c7ad069e54ae5c1effb6b/gui/src/App.js#L334-L354",target:"_blank",rel:"noopener noreferrer"}},[e._v("SecretJS is used to generate a secure random number"),r("OutboundLink")],1),e._v(" and sends it as a secret when a player joins the table. A random number is not really necessary, and every secret number would work just as well.")]),e._v(" "),r("li",[e._v("As long as at least one player is not colluding with the rest, and by properties of sha256, the seeds for shuffling the deck are known only to the contract and to no one else. If all players are colliding, they might as well all play with open hands. 😂")])]),e._v(" "),r("h3",{attrs:{id:"use-an-external-oracle"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#use-an-external-oracle"}},[e._v("#")]),e._v(" Use an external oracle")]),e._v(" "),r("p",[e._v("No implementation exists yet, but it's not that hard to implement.")]),e._v(" "),r("p",[e._v("For example:")]),e._v(" "),r("ol",[r("li",[e._v("Have a "),r("code",[e._v("handle")]),e._v(" function "),r("code",[e._v("input_entropy")]),e._v(" for users to send entropy in.")]),e._v(" "),r("li",[r("code",[e._v("input_entropy")]),e._v(" will have a storage key named "),r("code",[e._v("seed")]),e._v(".")]),e._v(" "),r("li",[e._v("On each input to "),r("code",[e._v("input_entropy")]),e._v(", "),r("code",[e._v("seed = hash(seed + input)")]),e._v(".")]),e._v(" "),r("li",[e._v("Have another "),r("code",[e._v("handle")]),e._v(" function "),r("code",[e._v("get_random_number")]),e._v(" for users to get a random number.")]),e._v(" "),r("li",[r("code",[e._v("get_random_number")]),e._v(" must also add to the entropy pool, otherwise consecutive "),r("code",[e._v("get_random_number")]),e._v(" calls will output the same random number. For example "),r("code",[e._v("seed = hash(seed + msg.sender + block.height + ...)")]),e._v(".")]),e._v(" "),r("li",[r("code",[e._v("get_random_number")]),e._v(" will just return the "),r("code",[e._v("hash(seed)")]),e._v(" or some other non-reversible derivative of it, and update the "),r("code",[e._v("seed")]),e._v(" with the new entropy like described in the previous point.")]),e._v(" "),r("li",[e._v("Have "),r("code",[e._v("get_random_number")]),e._v(" also callback to the caller contract with the random number.")]),e._v(" "),r("li",[e._v("You can even have a cron job to send data from "),r("a",{attrs:{href:"https://www.random.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("random.org"),r("OutboundLink")],1),e._v(" to "),r("code",[e._v("input_entropy")]),e._v(".")])]),e._v(" "),r("p",[e._v("This exmaple has a much worse UX than rolling your own randomness, but at least contracts won't have to rely on users to send entropy and also won't take the risk of messing up the implementation.")]),e._v(" "),r("h2",{attrs:{id:"outputs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#outputs"}},[e._v("#")]),e._v(" Outputs")]),e._v(" "),r("h2",{attrs:{id:"external-query"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#external-query"}},[e._v("#")]),e._v(" External query")]),e._v(" "),r("h2",{attrs:{id:"compiling"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#compiling"}},[e._v("#")]),e._v(" Compiling")]),e._v(" "),r("h3",{attrs:{id:"with-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#with-docker"}},[e._v("#")]),e._v(" With docker")]),e._v(" "),r("div",{staticClass:"language-console extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ docker run --rm -it -v /absolute/path/to/contract/project:/contract enigmampc/secret-contract-optimizer\n")])])]),r("p",[e._v("Where "),r("code",[e._v("/absolute/path/to/contract/project")]),e._v(" is pointing to the directory that contains your Secret Contract's "),r("code",[e._v("Cargo.toml")]),e._v(".")]),e._v(" "),r("p",[e._v("This will output an optimized build file "),r("code",[e._v("/absolute/path/to/contract/project/contract.wasm.gz")]),e._v(".")]),e._v(" "),r("h3",{attrs:{id:"without-docker"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#without-docker"}},[e._v("#")]),e._v(" Without docker")]),e._v(" "),r("div",{staticClass:"language-console extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ rustup target add wasm32-unknown-unknown\n$ sudo apt install binaryen\n")])])]),r("div",{staticClass:"language-console extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("$ RUSTFLAGS='-C link-arg=-s' cargo build --release --target wasm32-unknown-unknown --locked\n$ wasm-opt -Oz ./target/wasm32-unknown-unknown/release/*.wasm -o ./contract.wasm\n$ cat ./contract.wasm | gzip -9 > ./contract.wasm.gz\n")])])]),r("p",[e._v("Breakdown:")]),e._v(" "),r("ol",[r("li",[e._v("Build a release mode WASM file, strip symbols")]),e._v(" "),r("li",[e._v("Further optimize with "),r("a",{attrs:{href:"https://github.com/WebAssembly/binaryen",target:"_blank",rel:"noopener noreferrer"}},[e._v("wasm-opt"),r("OutboundLink")],1)]),e._v(" "),r("li",[e._v("Gzip")])]),e._v(" "),r("h2",{attrs:{id:"storing-and-deploying"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#storing-and-deploying"}},[e._v("#")]),e._v(" Storing and deploying")]),e._v(" "),r("h2",{attrs:{id:"verifying-your-contract-code-on-explorers"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#verifying-your-contract-code-on-explorers"}},[e._v("#")]),e._v(" Verifying your contract code on explorers")]),e._v(" "),r("h2",{attrs:{id:"testing"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#testing"}},[e._v("#")]),e._v(" Testing")]),e._v(" "),r("h2",{attrs:{id:"debugging"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#debugging"}},[e._v("#")]),e._v(" Debugging")]),e._v(" "),r("h2",{attrs:{id:"building-secret-apps-with-secretjs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#building-secret-apps-with-secretjs"}},[e._v("#")]),e._v(" Building secret apps with SecretJS")]),e._v(" "),r("p",[e._v("A Secret App, or a SApp, is a DApp with computational and data privacy.\nA Secret App is usually comprised of the following components:")]),e._v(" "),r("ul",[r("li",[e._v("A Secret Contract deployed on the Secret Network")]),e._v(" "),r("li",[e._v("A frontend app built with a JavaScript framework (E.g. ReactJS, VueJS, AngularJS, etc.)")]),e._v(" "),r("li",[e._v("The frontend app connects to the Secret Network using SecretJS,")]),e._v(" "),r("li",[e._v("SecretJS interacts with a REST API exposed by nodes in the Secret Network. The REST API/HTTPS server is commonly referred to as LCD Server (Light Client Daemon :shrug:). Usually by connecting SecretJS with a wallet, the wallet handles the interactions with the LCD server.")])]),e._v(" "),r("h3",{attrs:{id:"wallet-integration"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#wallet-integration"}},[e._v("#")]),e._v(" Wallet integration")]),e._v(" "),r("p",[e._v("Still not implemented in wallets. Can implement a local wallet but this will probably won't be needed anymore after 2020.")]),e._v(" "),r("h1",{attrs:{id:"differences-from-cosmwasm"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#differences-from-cosmwasm"}},[e._v("#")]),e._v(" Differences from CosmWasm")]),e._v(" "),r("p",[e._v("Secret Contacts are based on CosmWasm v0.10, but in order to preserve privacy, they diverge in functionality in some cases.")]),e._v(" "),r("ul",[r("li",[r("code",[e._v("code_hash")]),e._v(" in callbacks")]),e._v(" "),r("li",[e._v("Can access the current contract's "),r("code",[e._v("code_hash")]),e._v(" via "),r("code",[e._v("env.contract_code_hash")])]),e._v(" "),r("li",[e._v("contract labels are unique, thus mandatory on callback to "),r("code",[e._v("init")])]),e._v(" "),r("li",[r("code",[e._v("migrate")]),e._v(" and "),r("code",[e._v("admin")]),e._v(" for contracts is not allowed")]),e._v(" "),r("li",[e._v("iterator ("),r("code",[e._v("db_scan")]),e._v(", "),r("code",[e._v("db_next")]),e._v(") on contract state keys is not allowed")]),e._v(" "),r("li",[r("code",[e._v("cosmwasm_std")]),e._v(" changes...")]),e._v(" "),r("li",[e._v("SGX memory limits (30 MiB total, 12 MiB per contract vs 32 MiB per contract)")]),e._v(" "),r("li",[e._v("We charge gas for memory allocations, vanilla CosmWasm don't")]),e._v(" "),r("li",[r("code",[e._v("SecretJS")]),e._v(" has a new function - "),r("code",[e._v("GenerateNewSeed")]),e._v(" to help apps to get a secure 32 byte random number")])])])}),[],!1,null,null,null);t.default=s.exports}}]);