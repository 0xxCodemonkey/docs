{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{375:function(s,a,e){\"use strict\";e.r(a);var t=e(42),r=Object(t.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[e(\"h1\",{attrs:{id:\"install\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#install\"}},[s._v(\"#\")]),s._v(\" Install\")]),s._v(\" \"),e(\"p\",[e(\"strong\",[s._v(\"Requirement\")]),s._v(\": Go version needs to be \"),e(\"a\",{attrs:{href:\"https://golang.org/dl/\",target:\"_blank\",rel:\"noopener noreferrer\"}},[s._v(\"1.13 or higher\"),e(\"OutboundLink\")],1),s._v(\".\")]),s._v(\" \"),e(\"h1\",{attrs:{id:\"developers-quick-start\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#developers-quick-start\"}},[s._v(\"#\")]),s._v(\" Developers Quick Start\")]),s._v(\" \"),e(\"h2\",{attrs:{id:\"local-installation\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#local-installation\"}},[s._v(\"#\")]),s._v(\" Local installation\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" clone https://github.com/enigmampc/SecretNetwork\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\"cd\")]),s._v(\" SecretNetwork\\ngo mod tidy\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"make\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"install\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# installs secretd and secretcli\")]),s._v(\"\\n\")])])]),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretcli config chain-id enigma-testnet \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# now we won't need to type --chain-id enigma-testnet every time\")]),s._v(\"\\nsecretcli config output json\\nsecretcli config indent \"),e(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"true\")]),s._v(\"\\nsecretcli config trust-node \"),e(\"span\",{pre:!0,attrs:{class:\"token boolean\"}},[s._v(\"true\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# true if you trust the full-node you are connecting to, false otherwise\")]),s._v(\"\\n\\nsecretd init banana --chain-id enigma-testnet \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# banana==moniker==user-agent of this node\")]),s._v(\"\\nperl -i -pe \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\\'s/\"stake\"/\"uscrt\"/g\\'')]),s._v(\" ~/.secretd/config/genesis.json \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# change the default staking denom from stake to uscrt\")]),s._v(\"\\n\\nsecretcli keys \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),s._v(\" a\\nsecretcli keys \"),e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"add\")]),s._v(\" b\\n\\nsecretd add-genesis-account \"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$(\")]),s._v(\"secretcli keys show -a a\"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\")\")])]),s._v(\" 1000000000000uscrt \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 1 SCRT == 10^6 uSCRT\")]),s._v(\"\\nsecretd add-genesis-account \"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$(\")]),s._v(\"secretcli keys show -a b\"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\")\")])]),s._v(\" 2000000000000uscrt \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# 1 SCRT == 10^6 uSCRT\")]),s._v(\"\\n\\nsecretd validate-genesis \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# make sure genesis file is correct\")]),s._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# `secretd export` to send genesis.json to validators\")]),s._v(\"\\n\\nsecretd gentx --name a --amount 1000000uscrt \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# generate a genesis transaction - this makes a a validator on genesis which stakes 1000000uscrt (1 SCRT)\")]),s._v(\"\\n\\nsecretd collect-gentxs \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# input the genTx into the genesis file, so that the chain is aware of the validators\")]),s._v(\"\\n\\nsecretd validate-genesis \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# make sure genesis file is correct\")]),s._v(\"\\n\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# `secretd export` to send genesis.json to validators\")]),s._v(\"\\n\\nsecretd start --pruning nothing \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# starts a node\")]),s._v(\"\\n\")])])]),e(\"h2\",{attrs:{id:\"docker-installation\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#docker-installation\"}},[s._v(\"#\")]),s._v(\" Docker installation\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[e(\"span\",{pre:!0,attrs:{class:\"token function\"}},[s._v(\"git\")]),s._v(\" clone https://github.com/enigmampc/SecretNetwork\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\"cd\")]),s._v(\" SecretNetwork\\ndocker build -t secretdev -f Dockerfile_devnet \"),e(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[s._v(\".\")]),s._v(\"\\n\\ndocker run -d -p \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"26657\")]),s._v(\":26657 -p \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"26656\")]),s._v(\":26656 -p \"),e(\"span\",{pre:!0,attrs:{class:\"token number\"}},[s._v(\"1317\")]),s._v(\":1317 \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n --name secretdev secretdev\\n\")])])]),e(\"h1\",{attrs:{id:\"delegation-rewards\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#delegation-rewards\"}},[s._v(\"#\")]),s._v(\" Delegation & Rewards\")]),s._v(\" \"),e(\"h2\",{attrs:{id:\"b-is-a-delegator-of-a\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#b-is-a-delegator-of-a\"}},[s._v(\"#\")]),s._v(\" \"),e(\"code\",[s._v(\"b\")]),s._v(\" is a delegator of \"),e(\"code\",[s._v(\"a\")])]),s._v(\" \"),e(\"p\",[s._v(\"Now \"),e(\"code\",[s._v(\"a\")]),s._v(\" is a validator with 1 SCRT (1000000uscrt) staked.\"),e(\"br\"),s._v(\"\\nThis is how \"),e(\"code\",[s._v(\"b\")]),s._v(\" can delegate 0.00001 SCRT to \"),e(\"code\",[s._v(\"a\")]),s._v(\":\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretcli tx staking delegate \"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$(\")]),s._v(\"secretcli keys show a --bech\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"val -a\"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\")\")])]),s._v(\" 10uscrt --from b\\n\")])])]),e(\"p\",[s._v(\"This is how to see \"),e(\"code\",[s._v(\"b\")]),s._v(\"'s rewards from delegating to \"),e(\"code\",[s._v(\"a\")]),s._v(\":\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretcli q distribution rewards \"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$(\")]),s._v(\"secretcli keys show -a b\"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\")\")])]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"This is how \"),e(\"code\",[s._v(\"b\")]),s._v(\" can withdraw its rewards:\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretcli tx distribution withdraw-rewards \"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$(\")]),s._v(\"secretcli keys show --bech\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"val -a a\"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\")\")])]),s._v(\" --from b\\n\")])])]),e(\"h2\",{attrs:{id:\"a-is-a-validator-and-has-b-as-a-delegator\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#a-is-a-validator-and-has-b-as-a-delegator\"}},[s._v(\"#\")]),s._v(\" \"),e(\"code\",[s._v(\"a\")]),s._v(\" is a validator and has \"),e(\"code\",[s._v(\"b\")]),s._v(\" as a delegator\")]),s._v(\" \"),e(\"p\",[e(\"code\",[s._v(\"a\")]),s._v(\" was set up as a validator from genesis.\"),e(\"br\"),s._v(\"\\nThis is how to see \"),e(\"code\",[s._v(\"a\")]),s._v(\"'s rewards from being a validator:\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretcli q distribution rewards \"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$(\")]),s._v(\"secretcli keys show -a a\"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\")\")])]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"This is how to see \"),e(\"code\",[s._v(\"a\")]),s._v(\"'s commissions from being a validator:\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretcli q distribution commission \"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$(\")]),s._v(\"secretcli keys show -a --bech\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"val a\"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\")\")])]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"This is how \"),e(\"code\",[s._v(\"a\")]),s._v(\" can withdraw its rewards + its commissions from being a validator:\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretcli tx distribution withdraw-rewards \"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$(\")]),s._v(\"secretcli keys show --bech\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\"val -a a\"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\")\")])]),s._v(\" --from a --commission\\n\")])])]),e(\"p\",[s._v(\"(To withdraw only rewards omit the \"),e(\"code\",[s._v(\"--commission\")]),s._v(\")\")]),s._v(\" \"),e(\"h1\",{attrs:{id:\"run-a-node-after-genesis\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#run-a-node-after-genesis\"}},[s._v(\"#\")]),s._v(\" Run a node (after genesis)\")]),s._v(\" \"),e(\"p\",[s._v(\"First, init your environment:\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretd init \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"[\")]),s._v(\"moniker\"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"]\")]),s._v(\" --chain-id enigma-testnet\\n\")])])]),e(\"p\",[s._v(\"Now you need a valid running node to send you their \"),e(\"code\",[s._v(\"genesis.json\")]),s._v(\" file (usually at \"),e(\"code\",[s._v(\"~/.secretd/config/genesis.json\")]),s._v(\").\"),e(\"br\"),s._v(\"\\nOnce you have the valid \"),e(\"code\",[s._v(\"genesis.json\")]),s._v(\", put it in \"),e(\"code\",[s._v(\"~/.secretd/config/genesis.json\")]),s._v(\" (overwrite the existing file if needed).\"),e(\"br\"),s._v(\"\\nNext, edit your \"),e(\"code\",[s._v(\"~/.secretd/config/config.toml\")]),s._v(\", set the \"),e(\"code\",[s._v(\"persistent_peers\")]),s._v(\":\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"persistent_peers \"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"[id]@[peer_node_ip]:26656\"')]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# `id` can be aquired from your first peer by running `secretcli status`\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"That's it! Once you're done, just run:\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretd start --pruning nothing\\n\")])])]),e(\"p\",[s._v(\"You will see your local blockchain replica starting to catch up with your peer's one.\")]),s._v(\" \"),e(\"p\",[s._v(\"Congrats, you are now up and running!\")]),s._v(\" \"),e(\"p\",[e(\"strong\",[s._v(\"Note:\")]),s._v(\" you can also run \"),e(\"code\",[s._v(\"secretd start --pruning nothing --p2p.persistent_peers [id]@[peer_node_ip]:26656\")]),s._v(\" instead of editing the conf file.\"),e(\"br\"),s._v(\" \"),e(\"strong\",[s._v(\"Note\")]),s._v(\": If anything goes wrong, delete the \"),e(\"code\",[s._v(\"~/.secretd\")]),s._v(\" and \"),e(\"code\",[s._v(\"~/.secretcli\")]),s._v(\" dirs and start again.\")]),s._v(\" \"),e(\"h1\",{attrs:{id:\"join-as-a-new-validator\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#join-as-a-new-validator\"}},[s._v(\"#\")]),s._v(\" Join as a new Validator\")]),s._v(\" \"),e(\"p\",[s._v(\"After you have a private node up and running, run the following command:\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretcli tx staking create-validator \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n  --amount\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"num of coins\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# This is the amount of coins you put at stake. i.e. 100000uscrt\")]),s._v(\"\\n  --pubkey\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\"$(\")]),s._v(\"secretd tendermint show-validator\"),e(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[s._v(\")\")])]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n  --moniker\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"<name-of-your-moniker>\"')]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n  --chain-id\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"chain-id\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n  --commission-rate\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"0.10\"')]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n  --commission-max-rate\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"0.20\"')]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n  --commission-max-change-rate\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"0.01\"')]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n  --min-self-delegation\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"1\"')]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n  --gas\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"auto\"')]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n  --gas-prices\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"0.025uscrt\"')]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[s._v(\"\\\\\")]),s._v(\"\\n  --from\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"=\")]),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\"<\")]),s._v(\"name or address\"),e(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[s._v(\">\")]),s._v(\" \"),e(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[s._v(\"# Name or address of your existing account\")]),s._v(\"\\n\")])])]),e(\"p\",[s._v(\"To check if you got added to the validator-set by running:\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-bash extra-class\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[e(\"code\",[s._v(\"secretcli q tendermint-validator-set\\n\")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);","extractedComments":[]}