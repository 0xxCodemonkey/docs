{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{376:function(t,e,a){\"use strict\";a.r(e);var s=a(42),r=Object(s.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":t.$parent.slotKey}},[a(\"h1\",{attrs:{id:\"deploy-smart-contract\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#deploy-smart-contract\"}},[t._v(\"#\")]),t._v(\" Deploy Smart Contract\")]),t._v(\" \"),a(\"p\",[t._v(\"Before deploying or storing the contract on the testnet, need to run the cosmwasm optimizer.\")]),t._v(\" \"),a(\"h3\",{attrs:{id:\"optimize-compiled-wasm\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#optimize-compiled-wasm\"}},[t._v(\"#\")]),t._v(\" Optimize compiled wasm\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('docker run --rm -v \"$(pwd)\":/code \\\\\\n  --mount type=volume,source=\"$(basename \"$(pwd)\")_cache\",target=/code/target \\\\\\n  --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \\\\\\n  cosmwasm/rust-optimizer:0.8.0  \\n')])])]),a(\"p\",[t._v(\"The contract wasm needs to be optimized to get a smaller footprint. Cosmwasm notes state the contract would be too large for the blockchain unless optimized. This example contract.wasm is 1.8M before optimizing, 90K after.\")]),t._v(\" \"),a(\"p\",[t._v(\"The optimization creates two files:\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[t._v(\"contract.wasm\")]),t._v(\" \"),a(\"li\",[t._v(\"hash.txt\")])]),t._v(\" \"),a(\"h3\",{attrs:{id:\"store-the-smart-contract-on-our-local-testnet\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#store-the-smart-contract-on-our-local-testnet\"}},[t._v(\"#\")]),t._v(\" Store the Smart Contract on our local Testnet\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"# First lets start it up again, this time mounting our project's code inside the container.\\ndocker run -it --rm \\\\\\n -p 26657:26657 -p 26656:26656 -p 1317:1317 \\\\\\n -v $(pwd):/root/code \\\\\\n --name secretdev enigmampc/secret-network-bootstrap-sw:latest\\n\")])])]),a(\"p\",[t._v(\"Upload the optimized contract.wasm to \"),a(\"em\",[t._v(\"secretdev\")]),t._v(\" :\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v(\"docker exec -it secretdev /bin/bash\\n\\ncd code\\n\\nsecretcli tx compute store contract.wasm --from a --gas auto -y --keyring-backend test\\n\")])])]),a(\"h3\",{attrs:{id:\"querying-the-smart-contract-and-code\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#querying-the-smart-contract-and-code\"}},[t._v(\"#\")]),t._v(\" Querying the Smart Contract and Code\")]),t._v(\" \"),a(\"p\",[t._v(\"List current smart contract code\")]),t._v(\" \"),a(\"div\",{staticClass:\"language- extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[a(\"code\",[t._v('secretcli query compute list-code\\n[\\n  {\\n    \"id\": 1,\\n    \"creator\": \"enigma1klqgym9m7pcvhvgsl8mf0elshyw0qhruy4aqxx\",\\n    \"data_hash\": \"0C667E20BA2891536AF97802E4698BD536D9C7AB36702379C43D360AD3E40A14\",\\n    \"source\": \"\",\\n    \"builder\": \"\"\\n  }\\n]\\n')])])]),a(\"h3\",{attrs:{id:\"instantiate-the-smart-contract\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#instantiate-the-smart-contract\"}},[t._v(\"#\")]),t._v(\" Instantiate the Smart Contract\")]),t._v(\" \"),a(\"p\",[t._v(\"At this point the contract's been uploaded and stored on the testnet, but there's no \\\"instance.\\\"\\nThis is like \"),a(\"code\",[t._v(\"discovery migrate\")]),t._v(\" which handles both the deploying and creation of the contract instance, except in Cosmos the deploy-execute process consists of 3 steps rather than 2 in Ethereum. You can read more about the logic behind this decision, and other comparisons to Solidity, in the \"),a(\"a\",{attrs:{href:\"https://www.cosmwasm.com/docs/getting-started/smart-contracts\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"cosmwasm documentation\"),a(\"OutboundLink\")],1),t._v(\". These steps are:\")]),t._v(\" \"),a(\"ol\",[a(\"li\",[t._v(\"Upload Code - Upload some optimized wasm code, no state nor contract address (example Standard ERC20 contract)\")]),t._v(\" \"),a(\"li\",[t._v(\"Instantiate Contract - Instantiate a code reference with some initial state, creates new address (example set token name, max issuance, etc for my ERC20 token)\")]),t._v(\" \"),a(\"li\",[t._v(\"Execute Contract - This may support many different calls, but they are all unprivileged usage of a previously instantiated contract, depends on the contract design (example: Send ERC20 token, grant approval to other contract)\")])]),t._v(\" \"),a(\"p\",[t._v(\"To create an instance of this project we must also provide some JSON input data, a starting count.\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[t._v(\"INIT\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"{'),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[t._v('\\\\\"')]),t._v(\"count\"),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[t._v('\\\\\"')]),t._v(': 100000000}\"')]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[t._v(\"CODE_ID\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"\\nsecretcli tx compute instantiate \"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$CODE_ID\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"'),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$INIT\")]),t._v('\"')]),t._v(\" --from a --label \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"my counter\"')]),t._v(\" -y --keyring-backend \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"test\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"With the contract now initialized, we can find its address\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[t._v(\"secretcli query compute list-contract-by-code \"),a(\"span\",{pre:!0,attrs:{class:\"token number\"}},[t._v(\"1\")]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"Our instance is secret18vd8fpwxzck93qlwghaj6arh4p7c5n8978vsyg\")]),t._v(\" \"),a(\"p\",[t._v(\"We can query the contract state\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token assign-left variable\"}},[t._v(\"CONTRACT\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\"secret18vd8fpwxzck93qlwghaj6arh4p7c5n8978vsyg\\nsecretcli query compute contract-state smart \"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$CONTRACT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"{'),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[t._v('\\\\\"')]),t._v(\"get_count\"),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[t._v('\\\\\"')]),t._v(': {}}\"')]),t._v(\"\\n\")])])]),a(\"p\",[t._v(\"And we can increment our counter\")]),t._v(\" \"),a(\"div\",{staticClass:\"language-bash extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-bash\"}},[a(\"code\",[t._v(\"secretcli tx compute execute \"),a(\"span\",{pre:!0,attrs:{class:\"token variable\"}},[t._v(\"$CONTRACT\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"{'),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[t._v('\\\\\"')]),t._v(\"increment\"),a(\"span\",{pre:!0,attrs:{class:\"token entity\",title:'\\\\\"'}},[t._v('\\\\\"')]),t._v(': {}}\"')]),t._v(\" --from a --keyring-backend \"),a(\"span\",{pre:!0,attrs:{class:\"token builtin class-name\"}},[t._v(\"test\")]),t._v(\"\\n\")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);","extractedComments":[]}